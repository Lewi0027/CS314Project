package com.tco.query;

import com.tco.requests.Place;
import com.tco.requests.Places;

import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;

import static org.mockito.Mockito.*;
import org.mockito.Mockito;
import org.mockito.MockedStatic;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.DisplayName;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;
import static org.junit.jupiter.api.Assertions.assertThrows;


// Tests generated by ChatGPT, double checked for correctness. We dont fully understand mocking yet
public class TestDatabase {

    static class ResultSetConverter {
        
        public static String resultSetToString(ResultSet rs) throws SQLException {
            StringBuilder sb = new StringBuilder();
            ResultSetMetaData rsmd = rs.getMetaData();
            int columnCount = rsmd.getColumnCount();

            // Append column names (header)
            for (int i = 1; i <= columnCount; i++) {
                if (i > 1) sb.append(",  ");
                sb.append(rsmd.getColumnName(i));
            }
            sb.append("\n");

            // Append rows
            while (rs.next()) {
                for (int i = 1; i <= columnCount; i++) {
                    if (i > 1) sb.append(",  ");
                    sb.append(rs.getString(i));
                }
                sb.append("\n");
            }

            return sb.toString();
        }
    }

    @Test
    @DisplayName("bscheidt: Mock test valid performQuery")
    public void testValidPerformQueryMock() throws Exception {
        String sql = "show tables;";
        String expected = "TABLE_NAME\ncontinent\ncountry\nregion\nworld\n";

        ResultSet mockResultSet = mock(ResultSet.class);
        ResultSetMetaData mockMetaData = mock(ResultSetMetaData.class);

        when(mockResultSet.getMetaData()).thenReturn(mockMetaData);
        when(mockMetaData.getColumnCount()).thenReturn(1);
        when(mockMetaData.getColumnName(1)).thenReturn("TABLE_NAME");

        when(mockResultSet.next()).thenReturn(true, true, true, true, false); // Simulate 4 rows
        when(mockResultSet.getString(1)).thenReturn("continent", "country", "region", "world");

        try (MockedStatic<Database> mockedDatabase = Mockito.mockStatic(Database.class)) {
            mockedDatabase.when(() -> Database.performQuery(anyString())).thenReturn(mockResultSet);

            String actual = ResultSetConverter.resultSetToString(Database.performQuery(anyString()));
            assertEquals(expected, actual);
        }
    }

    @Test
    @DisplayName("bscheidt: test invalid performQuery")
    public void testInvalidPerformQuery() {
        String sql = "invalid query";

        try (MockedStatic<Database> mockedDatabase = Mockito.mockStatic(Database.class)) {
            mockedDatabase.when(() -> Database.performQuery(sql))
                        .thenThrow(new SQLException("Invalid query"));

            assertThrows(SQLException.class, () -> {
                Database.performQuery(sql);
            });
        }
    }

    @Test
    @DisplayName("lewi0027:testing Places() method")
    public void testPlacesMethod() throws Exception {
        Places mockedPlaces = new Places();

        for (int i = 0; i < 105; i++) {
            mockedPlaces.add(mock(Place.class));
        }

        try (MockedStatic<Database> mockedDatabase = Mockito.mockStatic(Database.class)) {
            mockedDatabase.when(() -> Database.places(anyString())).thenReturn(mockedPlaces);

            Places actual = Database.places("SELECT * FROM world WHERE latitude BETWEEN 5.0 AND 25.0 AND longitude BETWEEN 30.0 AND 40.0;");

            assertEquals(105, actual.size());
        } catch(Exception e) {
            fail("Shouldn't have thrown an exception when querying the DB.");
        }
    }

    @Test
    @DisplayName("lewi0027:testing Places() method with an Empty Set return")
    public void testPlacesMethodEmptySet() {
        Places mockedPlaces = new Places();

        try (MockedStatic<Database> mockedDatabase = Mockito.mockStatic(Database.class)) {
            mockedDatabase.when(() -> Database.places("SELECT * FROM world WHERE latitude BETWEEN 75.0 AND 85.0 AND longitude BETWEEN 30.0 AND 40.0;")).thenReturn(mockedPlaces);

            Places actual = Database.places("SELECT * FROM world WHERE latitude BETWEEN 75.0 AND 85.0 AND longitude BETWEEN 30.0 AND 40.0;");

            assertEquals(0, actual.size());
        } catch(Exception e) {
            fail("Shouldn't have thrown an exception when querying the DB.");
        }
    }
    
}
