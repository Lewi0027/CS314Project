{
	"info": {
		"_postman_id": "a4a381dc-b7b6-486e-abcf-7eed07eb4411",
		"name": "find",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_uid": "25883428-a4a381dc-b7b6-486e-abcf-7eed07eb4411"
	},
	"item": [
		{
			"name": "base",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "749b06bd-7ba9-47c7-a113-e6e197e0367d",
						"exec": [
							"pm.test(\"Response is HTTP200 status\", () => {",
							"    pm.response.to.have.status(200);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "592f4f4f-1087-47ba-95fe-2bfdcf5b9991",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"requestType\": \"find\",\n    \"match\": \"denver\",\n    \"limit\": 1\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASE_URL}}/api/find",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"api",
						"find"
					]
				}
			},
			"response": []
		},
		{
			"name": "lewi0027: find test limit value",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "749b06bd-7ba9-47c7-a113-e6e197e0367d",
						"exec": [
							"pm.test(\"Response is HTTP200 status\", () => {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Test find for limit value of 100\", () => {",
							"    const responseJson = pm.response.json();",
							"    const places = responseJson.places;    ",
							"",
							"    pm.expect(places.length).to.eql(100);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "af6caf48-6838-499e-922c-3b9d1beea173",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"requestType\": \"find\",\n    \"match\": \"\",\n    \"limit\": 100\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASE_URL}}/api/find",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"api",
						"find"
					]
				}
			},
			"response": []
		},
		{
			"name": "lewi0027: find test no return",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "749b06bd-7ba9-47c7-a113-e6e197e0367d",
						"exec": [
							"pm.test(\"Response is HTTP200 status\", () => {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Test find for limit value of 100\", () => {",
							"    const responseJson = pm.response.json();",
							"    const places = responseJson.places;    ",
							"",
							"    pm.expect(places.length).to.eql(0);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "8a7a4799-1af7-4cb4-92c5-6274109c61fd",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"requestType\": \"find\",\n    \"match\": \"zyxwvut\",\n    \"limit\": 100\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASE_URL}}/api/find",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"api",
						"find"
					]
				}
			},
			"response": []
		},
		{
			"name": "lewi0027: find test \"bla\"",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "749b06bd-7ba9-47c7-a113-e6e197e0367d",
						"exec": [
							"pm.test(\"Response is HTTP200 status\", () => {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Test find SQL query\", () => {",
							"   const expectedData = [",
							"        { id: \"04MN\", name: \"Helblad Airport\", municipality: \"Kelliher\", type: \"small_airport\" },",
							"        { id: \"05V\", name: \"Blanca Airport\", municipality: \"Blanca\", type: \"small_airport\" },",
							"        { id: \"06IN\", name: \"Ellis Fly-In Airport\", municipality: \"Blackhawk\", type: \"small_airport\" },",
							"        { id: \"0ID4\", name: \"Black Butte Ranch Airport\", municipality: \"Shoshone\", type: \"small_airport\" },",
							"        { id: \"0WN6\", name: \"L-Z Blue Thunder Heliport\", municipality: \"Blaine\", type: \"heliport\" }",
							"    ];",
							"",
							"    ",
							"    const responseJson = pm.response.json();",
							"    const places = responseJson.places;    ",
							"",
							"    pm.expect(places.length).to.eql(expectedData.length);",
							"",
							"    for (let i = 0; i < expectedData.length; i++) {",
							"        const expectedPlace = expectedData[i];",
							"        const actualPlace = places[i];",
							"",
							"        pm.expect(actualPlace.id).to.eql(expectedPlace.id);",
							"        pm.expect(actualPlace.name).to.eql(expectedPlace.name);",
							"        pm.expect(actualPlace.municipality).to.eql(expectedPlace.municipality);",
							"        pm.expect(actualPlace.type).to.eql(expectedPlace.type);",
							"    }",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "08e20c69-1043-4ba0-9208-568f02903b66",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"requestType\": \"find\",\n    \"match\": \"bla\",\n    \"limit\": 5\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASE_URL}}/api/find",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"api",
						"find"
					]
				}
			},
			"response": []
		},
		{
			"name": "lewi0027: find test \"cha\"",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "749b06bd-7ba9-47c7-a113-e6e197e0367d",
						"exec": [
							"pm.test(\"Response is HTTP200 status\", () => {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Test find SQL query\", () => {",
							"     const expectedData = [",
							"        {id: \"00LL\", name: \"Ac & R Components Heliport\", municipality: \"Chatham\", type: \"heliport\"},",
							"        {id: \"01NM\", name: \"Champion Ranch Airport\", municipality: \"Artesia\", type: \"small_airport\"},",
							"        {id: \"04FA\", name: \"Richards Field\", municipality: \"Homestead\", type: \"small_airport\"},",
							"        {id: \"05FL\", name: \"Charlton Strip\", municipality: \"La Belle\", type: \"small_airport\"},",
							"        {id: \"06LA\", name: \"Panther Helicopters Inc Heliport\", municipality: \"Belle Chasse\", type: \"heliport\"}",
							"    ];",
							"    ",
							"    const responseJson = pm.response.json();",
							"    const places = responseJson.places;    ",
							"",
							"    pm.expect(places.length).to.eql(expectedData.length);",
							"",
							"    for (let i = 0; i < expectedData.length; i++) {",
							"        const expectedPlace = expectedData[i];",
							"        const actualPlace = places[i];",
							"",
							"        pm.expect(actualPlace.id).to.eql(expectedPlace.id);",
							"        pm.expect(actualPlace.name).to.eql(expectedPlace.name);",
							"        pm.expect(actualPlace.municipality).to.eql(expectedPlace.municipality);",
							"        pm.expect(actualPlace.type).to.eql(expectedPlace.type);",
							"    }",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "2e4411af-3f8e-4827-b64c-ce7a0bdcb538",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"requestType\": \"find\",\n    \"match\": \"cha\",\n    \"limit\": 5\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASE_URL}}/api/find",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"api",
						"find"
					]
				}
			},
			"response": []
		},
		{
			"name": "ajlei: find test no limit",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "60f20ccd-bfaf-44ee-ae79-e696e83ab1ea",
						"exec": [
							"pm.test(\"Response is HTTP200 status\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Normal Find response for Denver\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    const found = responseJson.found;    \r",
							"\r",
							"    pm.expect(found).to.eql(50427);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "39c998bc-3163-41b5-b833-dcceb3f9dd4f",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"requestType\": \"find\",\r\n    \"match\": \"\",\r\n    \"limit\": 0\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASE_URL}}/api/find",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"api",
						"find"
					]
				}
			},
			"response": []
		},
		{
			"name": "Wyattg5:findwhere1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "60f20ccd-bfaf-44ee-ae79-e696e83ab1ea",
						"exec": [
							"pm.test(\"Response is HTTP200 status\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"    const expectedNumberOfPlaces = 10;\r",
							"pm.test(\"Correct number of places\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    const expectedNumberOfPlaces = 10;\r",
							"    const places = responseJson.places;\r",
							"    pm.expect(places.length).to.equal(expectedNumberOfPlaces);\r",
							"});\r",
							"pm.test(\"correct where\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    const places = responseJson.places;\r",
							"    for (var i = 0; i < responseJson.length; i++) {\r",
							"        pm.expect(responseJson[i].where.to.eql([\"United States\"]));\r",
							"    }\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "c498bbcb-1dbc-435f-95ff-2d2bd9932a77",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"requestType\": \"find\",\r\n    \"match\": \"dave\",\r\n    \"type\": [\"airport\"],\r\n    \"where\": [\"United States\"],\r\n    \"limit\" : 10\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASE_URL}}/api/find",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"api",
						"find"
					]
				}
			},
			"response": []
		},
		{
			"name": "find test normal request",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "09d77ea9-4810-4822-a2d3-457f8623b766",
						"exec": [
							"pm.test(\"Response is HTTP200 status\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Normal Find response for Denver\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    const places = responseJson.places;    \r",
							"\r",
							"    pm.expect(places.length).to.eql(30);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "456bb57d-b5fb-4f45-bafb-0e97741d5f49",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"requestType\": \"find\",\r\n    \"match\": \"denver\",\r\n    \"limit\": 100\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASE_URL}}/api/find",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"api",
						"find"
					]
				}
			},
			"response": []
		},
		{
			"name": "diegocel: find test \"ice\"",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "09d77ea9-4810-4822-a2d3-457f8623b766",
						"exec": [
							"pm.test(\"Response is HTTP200 status\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Normal Find response for Denver\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    const places = responseJson.places;    \r",
							"\r",
							"    pm.expect(places.length).to.eql(30);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "6b71f7b8-a5c9-49c7-9129-f7327235706a",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"requestType\": \"find\",\r\n    \"match\": \"denver\",\r\n    \"limit\": 100\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASE_URL}}/api/find",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"api",
						"find"
					]
				}
			},
			"response": []
		},
		{
			"name": "lewi0027: find test where",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "749b06bd-7ba9-47c7-a113-e6e197e0367d",
						"exec": [
							"pm.test(\"Response is HTTP200 status\", () => {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Test find SQL query\", () => {",
							"    const responseJson = pm.response.json();",
							"    const found = responseJson.found;    ",
							"",
							"    pm.expect(found).to.be.within(24393, 24500);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "9f7ffa79-cb9c-4716-87dc-8a190b4e3968",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"requestType\": \"find\",\n    \"match\": \"\",\n    \"where\": [\"United States\", \"Canada\"],\n    \"limit\": 0\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASE_URL}}/api/find",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"api",
						"find"
					]
				}
			},
			"response": []
		},
		{
			"name": "lewi0027: find test where+match",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "749b06bd-7ba9-47c7-a113-e6e197e0367d",
						"exec": [
							"pm.test(\"Response is HTTP200 status\", () => {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Test find SQL query\", () => {",
							"   const expectedData = [",
							"        { id: \"KDEN\", name: \"Denver International Airport\", municipality: \"Denver\", type: \"large_airport\" },",
							"        { id: \"X-KDEN\", name: \"Denver Stapleton International Airport\", municipality: \"Denver\", type: \"closed\" },",
							"    ];",
							"",
							"    ",
							"    const responseJson = pm.response.json();",
							"    const places = responseJson.places;    ",
							"",
							"    pm.expect(places.length).to.eql(expectedData.length);",
							"",
							"    for (let i = 0; i < expectedData.length; i++) {",
							"        const expectedPlace = expectedData[i];",
							"        const actualPlace = places[i];",
							"",
							"        pm.expect(actualPlace.id).to.eql(expectedPlace.id);",
							"        pm.expect(actualPlace.name).to.eql(expectedPlace.name);",
							"        pm.expect(actualPlace.municipality).to.eql(expectedPlace.municipality);",
							"        pm.expect(actualPlace.type).to.eql(expectedPlace.type);",
							"    }",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "d518e57e-d9c5-4f5a-b197-ba14f89c00f9",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"requestType\": \"find\",\n    \"match\": \"Int\",\n    \"where\": [\"Denver\"],\n    \"limit\": 5\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASE_URL}}/api/find",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"api",
						"find"
					]
				}
			},
			"response": []
		}
	]
}